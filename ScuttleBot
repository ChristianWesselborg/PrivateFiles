#pragma config(Motor,  port2,           Rb,            tmotorServoContinuousRotation, openLoop, reversed)
#pragma config(Motor,  port3,           Rf,            tmotorServoContinuousRotation, openLoop, reversed)
#pragma config(Motor,  port4,           Lb,            tmotorServoContinuousRotation, openLoop)
#pragma config(Motor,  port5,           Lf,            tmotorServoContinuousRotation, openLoop)
#pragma config(Motor,  port6,           Sr,            tmotorServoStandard, openLoop)
#pragma config(Motor,  port7,           Sl,            tmotorServoStandard, openLoop)
//*!!Code automatically generated by 'ROBOTC' configuration wizard               !!*//

task one()
{
	int inc = 1;
	while(vexRT[Btn5U] == 1)
	{
		motor[Sl] = motor[Sl] + inc;
		wait1Msec(100);
	}
}

task two()
{
	int inc = -1;
	while(vexRT[Btn6U] == 1)
	{
		motor[Sl] = motor[Sr] + inc;
		wait1Msec(100);
	}
}

task three()
{
	int inc = -1;
	while(vexRT[Btn5D] == 1)
	{
		motor[Sl] = motor[Sl] + inc;
		wait1Msec(100);
	}
}

task four()
{
	int inc = 1;
	while(vexRT[Btn6D] == 1)
	{
		motor[Sl] = motor[Sr] + inc;
		wait1Msec(100);
	}
}

task main()
{
 int limit = 30;
 
 while (true)
 {
  if ((abs(vexRT[Ch3]) > limit) || (abs(vexRT[Ch4]) > limit))
  {
   motor[Rf] = (vexRT[Ch3] - vexRT[Ch4])/2;
   motor[Rb] = (vexRT[Ch3] - vexRT[Ch4])/2;
   motor[Lf] = (vexRT[Ch3] + vexRT[Ch4])/2;
   motor[Lb] = (vexRT[Ch3] + vexRT[Ch4])/2;
  }
  else
  {
   motor[Rf] = 0;
   motor[Rb] = 0;
   motor[Lf] = 0;
   motor[Lb] = 0;
	}
  
  if (vexRT[Btn5U] == 1)
   startTask (one);
 
  if (vexRT[Btn5D] == 1)
   startTask (three);
	
  if (vexRT[Btn6U] == 1)
   startTask (two);
 
  if (vexRT[Btn6U] == 1)
   startTask (four);
  
 }
}
